// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tx_cardano

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyServiceClient is the client API for KeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyServiceClient interface {
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error)
	ShowAddress(ctx context.Context, in *ShowAddressRequest, opts ...grpc.CallOption) (*ShowAddressResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	KeyExist(ctx context.Context, in *KeyExistRequest, opts ...grpc.CallOption) (*KeyExistResponse, error)
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	KeyFromKeyOrAddress(ctx context.Context, in *KeyFromKeyOrAddressRequest, opts ...grpc.CallOption) (*KeyFromKeyOrAddressResponse, error)
	RestoreKey(ctx context.Context, in *RestoreKeyRequest, opts ...grpc.CallOption) (*RestoreKeyResponse, error)
}

type keyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyServiceClient(cc grpc.ClientConnInterface) KeyServiceClient {
	return &keyServiceClient{cc}
}

func (c *keyServiceClient) AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error) {
	out := new(AddKeyResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/AddKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) ShowAddress(ctx context.Context, in *ShowAddressRequest, opts ...grpc.CallOption) (*ShowAddressResponse, error) {
	out := new(ShowAddressResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/ShowAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) KeyExist(ctx context.Context, in *KeyExistRequest, opts ...grpc.CallOption) (*KeyExistResponse, error) {
	out := new(KeyExistResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/KeyExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) KeyFromKeyOrAddress(ctx context.Context, in *KeyFromKeyOrAddressRequest, opts ...grpc.CallOption) (*KeyFromKeyOrAddressResponse, error) {
	out := new(KeyFromKeyOrAddressResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/KeyFromKeyOrAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) RestoreKey(ctx context.Context, in *RestoreKeyRequest, opts ...grpc.CallOption) (*RestoreKeyResponse, error) {
	out := new(RestoreKeyResponse)
	err := c.cc.Invoke(ctx, "/key.KeyService/RestoreKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServiceServer is the server API for KeyService service.
// All implementations must embed UnimplementedKeyServiceServer
// for forward compatibility
type KeyServiceServer interface {
	AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error)
	ShowAddress(context.Context, *ShowAddressRequest) (*ShowAddressResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	KeyExist(context.Context, *KeyExistRequest) (*KeyExistResponse, error)
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	KeyFromKeyOrAddress(context.Context, *KeyFromKeyOrAddressRequest) (*KeyFromKeyOrAddressResponse, error)
	RestoreKey(context.Context, *RestoreKeyRequest) (*RestoreKeyResponse, error)
	mustEmbedUnimplementedKeyServiceServer()
}

// UnimplementedKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyServiceServer struct {
}

func (UnimplementedKeyServiceServer) AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedKeyServiceServer) ShowAddress(context.Context, *ShowAddressRequest) (*ShowAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAddress not implemented")
}
func (UnimplementedKeyServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeyServiceServer) KeyExist(context.Context, *KeyExistRequest) (*KeyExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyExist not implemented")
}
func (UnimplementedKeyServiceServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedKeyServiceServer) KeyFromKeyOrAddress(context.Context, *KeyFromKeyOrAddressRequest) (*KeyFromKeyOrAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyFromKeyOrAddress not implemented")
}
func (UnimplementedKeyServiceServer) RestoreKey(context.Context, *RestoreKeyRequest) (*RestoreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreKey not implemented")
}
func (UnimplementedKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {}

// UnsafeKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServiceServer will
// result in compilation errors.
type UnsafeKeyServiceServer interface {
	mustEmbedUnimplementedKeyServiceServer()
}

func RegisterKeyServiceServer(s grpc.ServiceRegistrar, srv KeyServiceServer) {
	s.RegisterService(&KeyService_ServiceDesc, srv)
}

func _KeyService_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/AddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).AddKey(ctx, req.(*AddKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_ShowAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).ShowAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/ShowAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).ShowAddress(ctx, req.(*ShowAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_KeyExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).KeyExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/KeyExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).KeyExist(ctx, req.(*KeyExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_KeyFromKeyOrAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyFromKeyOrAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).KeyFromKeyOrAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/KeyFromKeyOrAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).KeyFromKeyOrAddress(ctx, req.(*KeyFromKeyOrAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_RestoreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).RestoreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key.KeyService/RestoreKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).RestoreKey(ctx, req.(*RestoreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyService_ServiceDesc is the grpc.ServiceDesc for KeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "key.KeyService",
	HandlerType: (*KeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKey",
			Handler:    _KeyService_AddKey_Handler,
		},
		{
			MethodName: "ShowAddress",
			Handler:    _KeyService_ShowAddress_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyService_DeleteKey_Handler,
		},
		{
			MethodName: "KeyExist",
			Handler:    _KeyService_KeyExist_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _KeyService_ListAddresses_Handler,
		},
		{
			MethodName: "KeyFromKeyOrAddress",
			Handler:    _KeyService_KeyFromKeyOrAddress_Handler,
		},
		{
			MethodName: "RestoreKey",
			Handler:    _KeyService_RestoreKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx-cardano/key.proto",
}
